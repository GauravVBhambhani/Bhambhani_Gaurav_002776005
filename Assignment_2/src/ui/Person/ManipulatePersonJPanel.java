/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Person;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import javax.imageio.ImageIO;
import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.Employee;
import model.House;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author gorubhambhani
 */
public class ManipulatePersonJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManipulatePersonJPanel
     */
    
    PersonDirectory personDatabase;
    Person selectedPerson;
    
    public ManipulatePersonJPanel(PersonDirectory personDatabase) {
        initComponents();
        
        this.personDatabase = personDatabase;
        
        populatePersonTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderGrp = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPerson = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        tfAge = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        rbMale = new javax.swing.JRadioButton();
        rbFemale = new javax.swing.JRadioButton();
        rbOthers = new javax.swing.JRadioButton();
        lblMobile = new javax.swing.JLabel();
        tfMobile = new javax.swing.JTextField();
        lblAddress = new javax.swing.JLabel();
        lblHouse = new javax.swing.JLabel();
        lblCommunity = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        tfCity = new javax.swing.JTextField();
        tfCommunity = new javax.swing.JTextField();
        tfHouse = new javax.swing.JTextField();
        btnSearchPersonName = new javax.swing.JButton();
        btnUpdatePerson = new javax.swing.JButton();
        btnViewPerson = new javax.swing.JButton();
        btnDeletePerson = new javax.swing.JButton();

        tblPerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Mobile", "Gender", "House", "Community", "City"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPerson);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Read/Update/Delete Person");

        lblName.setText("Name");

        lblAge.setText("Age");

        lblGender.setText("Gender");

        genderGrp.add(rbMale);
        rbMale.setText("Male");

        genderGrp.add(rbFemale);
        rbFemale.setText("Female");
        rbFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbFemaleActionPerformed(evt);
            }
        });

        genderGrp.add(rbOthers);
        rbOthers.setText("Others");

        lblMobile.setText("Mobile");

        tfMobile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfMobileActionPerformed(evt);
            }
        });

        lblAddress.setText("Address");

        lblHouse.setText("House");

        lblCommunity.setText("Community");

        lblCity.setText("City");

        tfCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCityActionPerformed(evt);
            }
        });

        tfCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCommunityActionPerformed(evt);
            }
        });

        tfHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfHouseActionPerformed(evt);
            }
        });

        btnSearchPersonName.setText("Search");

        btnUpdatePerson.setText("Update");
        btnUpdatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePersonActionPerformed(evt);
            }
        });

        btnViewPerson.setText("View");
        btnViewPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPersonActionPerformed(evt);
            }
        });

        btnDeletePerson.setText("Delete");
        btnDeletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePersonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblName)
                                    .addComponent(lblAge)
                                    .addComponent(lblMobile))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfAge, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                                    .addComponent(tfName)
                                    .addComponent(tfMobile)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblCity)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(tfCity))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblHouse)
                                            .addGap(18, 18, 18)
                                            .addComponent(tfHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblCommunity)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tfCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(18, 18, 18)
                        .addComponent(btnSearchPersonName)
                        .addGap(254, 254, 254))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAddress)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblGender)
                                .addGap(18, 18, 18)
                                .addComponent(rbMale)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbFemale)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbOthers)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(btnViewPerson)
                .addGap(18, 18, 18)
                .addComponent(btnUpdatePerson)
                .addGap(18, 18, 18)
                .addComponent(btnDeletePerson)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdatePerson)
                    .addComponent(btnViewPerson)
                    .addComponent(btnDeletePerson))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchPersonName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAge)
                    .addComponent(tfAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGender)
                    .addComponent(rbMale)
                    .addComponent(rbFemale)
                    .addComponent(rbOthers))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMobile)
                    .addComponent(tfMobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblAddress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHouse)
                    .addComponent(tfHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCommunity)
                    .addComponent(tfCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(tfCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(110, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public String getGender() {
        Enumeration<AbstractButton> radioButtons = genderGrp.getElements();
        while (radioButtons.hasMoreElements()) {
            AbstractButton currentRadioButton = radioButtons.nextElement();
            if (currentRadioButton.isSelected()) {
                return currentRadioButton.getText();
            }
        }
        return null;
    }
    
    private void rbFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbFemaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbFemaleActionPerformed

    private void tfMobileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfMobileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfMobileActionPerformed

    private void tfCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCityActionPerformed

    private void tfCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCommunityActionPerformed

    private void tfHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfHouseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfHouseActionPerformed

    private void btnUpdatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePersonActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        
        int selectedRowIndex = tblPerson.getSelectedRow();
        selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
        
        if (tblPerson.getSelectedRowCount() == 1){
            String name = tfName.getText();
            int age = Integer.parseInt(tfAge.getText());
            String gender = getGender();
            String mobile = tfMobile.getText();
            
            House house = new House(tfHouse.getText());
            
            Community community = new Community(tfCommunity.getText());
            City city = new City(tfCity.getText());

            model.setValueAt(name, tblPerson.getSelectedRow(), 0);
            model.setValueAt(age, tblPerson.getSelectedRow(), 1);
            model.setValueAt(mobile, tblPerson.getSelectedRow(), 2);
            model.setValueAt(gender, tblPerson.getSelectedRow(), 3);
            model.setValueAt(house, tblPerson.getSelectedRow(), 4);
            model.setValueAt(community, tblPerson.getSelectedRow(), 5);            
            model.setValueAt(city, tblPerson.getSelectedRow(), 6);
            
            selectedPerson.setName(name);
            selectedPerson.setAge(age);
            selectedPerson.setGender(gender);
            selectedPerson.setHouse(house);            
            selectedPerson.setCommunity(community);
            selectedPerson.setCity(city);

            JOptionPane.showMessageDialog(this, "Update Successful!");
        }
        else {
            if (tblPerson.getRowCount()==0)
                JOptionPane.showMessageDialog(this, "Table is Empty!");
            else 
                JOptionPane.showMessageDialog(this, "Select Single Row!");
        }
        personDatabase.updatePerson(selectedPerson, selectedRowIndex);
        
    }//GEN-LAST:event_btnUpdatePersonActionPerformed

    private void btnDeletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePersonActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = tblPerson.getSelectedRow();
        
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Row Not Selected!");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
        
        personDatabase.deletePerson(selectedPerson);
        
        JOptionPane.showMessageDialog(this, "Person Deleted.");
        
        populatePersonTable();
    }//GEN-LAST:event_btnDeletePersonActionPerformed

    private void btnViewPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPersonActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = tblPerson.getSelectedRow();
        
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Row Not Selected!");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
        
        tfName.setText(selectedPerson.getName());
        tfAge.setText(String.valueOf(selectedPerson.getAge()));
        
        String gender = selectedPerson.getGender();

        if (gender.equalsIgnoreCase("male")){
            rbMale.setSelected(true);
        }
        else if (gender.equalsIgnoreCase("female")){
            rbFemale.setSelected(true);
        }
        else{
            rbOthers.setSelected(true);
        }

        tfMobile.setText(String.valueOf(selectedPerson.getMobile()));
       
//        tfHouse.setText(selectedPerson.getHouse());
//        tfCommunity.setText(selectedPerson.getCommunity());
//        tfCity.setText(selectedPerson.getCity());
        
    }//GEN-LAST:event_btnViewPersonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeletePerson;
    private javax.swing.JButton btnSearchPersonName;
    private javax.swing.JButton btnUpdatePerson;
    private javax.swing.JButton btnViewPerson;
    private javax.swing.ButtonGroup genderGrp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblHouse;
    private javax.swing.JLabel lblMobile;
    private javax.swing.JLabel lblName;
    private javax.swing.JRadioButton rbFemale;
    private javax.swing.JRadioButton rbMale;
    private javax.swing.JRadioButton rbOthers;
    private javax.swing.JTable tblPerson;
    private javax.swing.JTextField tfAge;
    private javax.swing.JTextField tfCity;
    private javax.swing.JTextField tfCommunity;
    private javax.swing.JTextField tfHouse;
    private javax.swing.JTextField tfMobile;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables


    private void populatePersonTable() {
        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        
        model.setRowCount(0);
        
        for (Person person: personDatabase.getPersonHistory()){
            Object[] row = new Object[8];
            
            row[0] = person;
            row[1] = person.getName();
            row[2] = person.getAge();
            row[3] = person.getGender();
            row[4] = person.getMobile();
            row[5] = person.getHouse();
            row[6] = person.getCommunity();
            row[7] = person.getCity();
            
            model.addRow(row);
        }
    }
    
    private void searchByName(String name){
        DefaultTableModel model = (DefaultTableModel)tblPerson.getModel();
        model.setRowCount(0);
        for(Person person : personDatabase.searchPerson(name)){
            Object[] row = new Object[11];
            row[0] = person;
            row[1] = person.getName();
            row[2] = person.getAge();
            row[3] = person.getGender();
            row[4] = person.getMobile();
            row[5] = person.getHouse();
            row[6] = person.getCommunity();
            row[7] = person.getCity();
           
           model.addRow(row);
        }
    }

}
