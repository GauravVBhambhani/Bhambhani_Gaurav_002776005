/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.HealthSystem;
import model.Hospital;
/**
 *
 * @author gorubhambhani
 */
public class HospitalListSystem extends javax.swing.JPanel {
    private HealthSystem healthSystem;
    private String activeCity;
    private Hospital selectedHospital;

    /**
     * Creates new form HospitalListSystem
     */
    public HospitalListSystem(HealthSystem healthSystem) {
        initComponents();
        this.healthSystem = healthSystem;
        populateTable();
        populateCityComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 204, 102));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Hospital List");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                " Name", "City", "Community"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("View Hospital");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Create Hospital");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Update Hospital");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Delete Hospital");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setText("Name");

        jLabel3.setText("City");

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Community");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton2)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(353, 353, 353)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)))
                        .addGap(0, 38, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap(244, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTable1.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a hospital to view");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Hospital hospital = (Hospital) model.getValueAt(selectedRowIndex, 0);

        this.selectedHospital = hospital;

        int cityIndex = 0;
        for(int i = 0; i < this.healthSystem.getCityDirectory().getCities().size(); i++){
            City c = this.healthSystem.getCityDirectory().getCities().get(i);
            if (hospital.getCity().getCityName().equals(c.getCityName())) {
                cityIndex = i;
                break;
            }
        }

        int commIndex = 0;
        for (int i = 0; i < hospital.getCity().getCommunities().size(); i++) {
            Community c = hospital.getCity().getCommunities().get(i);
            if (hospital.getCommunity().getCommunity().equals(c.getCommunity())) {
                commIndex = i;
                break;
            }
        }

        jTextField1.setText(hospital.getHospitalName());
        jComboBox1.setSelectedIndex(cityIndex);
        jComboBox2.setSelectedIndex(commIndex);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        String name = jTextField1.getText();

        if (name.isBlank() || name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a name");
            return;
        }

        if (jComboBox1.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Please select a city");
            return;
        }

        if (jComboBox2.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Please select a community");
            return;
        }

        for (Hospital ho: this.healthSystem.getHospitalDirectory().getHospitals()) {
            if (ho.getHospitalName().equals(name)) {
                JOptionPane.showMessageDialog(this, "Hospital with same name exists");
                return;
            }
        }

        String cityName = jComboBox1.getSelectedItem().toString();
        String communityName = jComboBox2.getSelectedItem().toString();

        City selectedCity = null;
        for (City c: this.healthSystem.getCityDirectory().getCities()) {
            if (c.getCityName().equals(cityName)) {
                selectedCity = c;
            }
        }

        Community selectedCommunity = null;
        for(Community c : selectedCity.getCommunities()) {
            if (c.getCommunity().equals(communityName)) {
                selectedCommunity = c;
            }
        }

        Hospital hospital = new Hospital(name, selectedCity, selectedCommunity);

        healthSystem.getHospitalDirectory().getHospitals().add(hospital);

        populateTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (this.selectedHospital == null) {
            JOptionPane.showMessageDialog(this, "Please select a hospital to update");
            return;
        }

        String name = jTextField1.getText();

        if (name.isBlank() || name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a name");
            return;
        }

        if (jComboBox1.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Please select a city");
            return;
        }

        if (jComboBox2.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Please select a community");
            return;
        }

        String cityName = jComboBox1.getSelectedItem().toString();
        String communityName = jComboBox2.getSelectedItem().toString();

        City selectedCity = null;
        for (City c: this.healthSystem.getCityDirectory().getCities()) {
            if (c.getCityName().equals(cityName)) {
                selectedCity = c;
            }
        }

        Community selectedCommunity = null;
        for(Community c : selectedCity.getCommunities()) {
            if (c.getCommunity().equals(communityName)) {
                selectedCommunity = c;
            }
        }

        this.selectedHospital.setHospitalName(name);
        this.selectedHospital.setCity(selectedCity);
        this.selectedHospital.setCommunity(selectedCommunity);

        populateTable();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTable1.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a hospital to delete");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Hospital hospital = (Hospital) model.getValueAt(selectedRowIndex, 0);

        this.healthSystem.getHospitalDirectory().getHospitals().remove(hospital);
        populateTable();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        if (jComboBox1.getSelectedItem() != null) {
            this.activeCity = jComboBox1.getSelectedItem().toString();
            populateCommunityComboBox();
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void populateCommunityComboBox() {
        jComboBox2.removeAllItems();
        
        City selectedCity = null;
        for (City c: this.healthSystem.getCityDirectory().getCities()) {
            if (c.getCityName().equals(this.activeCity)) {
                selectedCity = c;
            }
        }
        
        for(Community c : selectedCity.getCommunities()) {
            jComboBox2.addItem(c.getCommunity());
        }
    }
    
    
    private void populateCityComboBox() {
        
        jComboBox1.removeAllItems();
        
        for(City c : this.healthSystem.getCityDirectory().getCities()){
            jComboBox1.addItem(c.getCityName());
        }
        
        jComboBox1.setSelectedIndex(0);
    }
    
    private void populateTable() {

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (Hospital hs : this.healthSystem.getHospitalDirectory().getHospitals()) {
            Object[] row = new Object[11];
            row[0] = hs;                     
            row[1] = hs.getCity().getCityName();
            row[2] = hs.getCommunity().getCommunity();
            model.addRow(row);

        }

    }

}
